// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CarFormPresentation renders correctly 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <form
    onSubmit={[Function]}
>
    <input
        name="name"
        onChange={[Function]}
        type="text"
        value="Audi"
    />
    
    <input
        name="acceleration"
        onChange={[Function]}
        type="number"
        value={12}
    />
    
    <button
        disabled={false}
        name="submit"
        type="submit"
    >
        Save
    </button>
    <button
        name="cancel"
        onClick={[Function]}
        type="button"
    >
        Cancel
    </button>
</form>,
  "nodes": Array [
    <form
      onSubmit={[Function]}
>
      <input
            name="name"
            onChange={[Function]}
            type="text"
            value="Audi"
      />
      
      <input
            name="acceleration"
            onChange={[Function]}
            type="number"
            value={12}
      />
      
      <button
            disabled={false}
            name="submit"
            type="submit"
      >
            Save
      </button>
      <button
            name="cancel"
            onClick={[Function]}
            type="button"
      >
            Cancel
      </button>
</form>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 2,
      "_context": Object {},
      "_currentElement": <CarFormPresentation
        car={
                Object {
                        "acceleration": 12,
                        "name": "Audi",
                      }
        }
        changeHandlers={
                Object {
                        "acceleration": [Function],
                        "name": [Function],
                      }
        }
        errors={
                Object {
                        "acceleration": "",
                        "name": "",
                      }
        }
        onCancel={[Function]}
        onSubmit={[Function]}
/>,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": StatelessComponent {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "car": Object {
            "acceleration": 12,
            "name": "Audi",
          },
          "changeHandlers": Object {
            "acceleration": [Function],
            "name": [Function],
          },
          "errors": Object {
            "acceleration": "",
            "name": "",
          },
          "onCancel": [Function],
          "onSubmit": [Function],
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <form
          onSubmit={[Function]}
>
          <input
                    name="name"
                    onChange={[Function]}
                    type="text"
                    value="Audi"
          />
          
          <input
                    name="acceleration"
                    onChange={[Function]}
                    type="number"
                    value={12}
          />
          
          <button
                    disabled={false}
                    name="submit"
                    type="submit"
          >
                    Save
          </button>
          <button
                    name="cancel"
                    onClick={[Function]}
                    type="button"
          >
                    Cancel
          </button>
</form>,
        "_debugID": 2,
        "_renderedOutput": <form
          onSubmit={[Function]}
>
          <input
                    name="name"
                    onChange={[Function]}
                    type="text"
                    value="Audi"
          />
          
          <input
                    name="acceleration"
                    onChange={[Function]}
                    type="number"
                    value={12}
          />
          
          <button
                    disabled={false}
                    name="submit"
                    type="submit"
          >
                    Save
          </button>
          <button
                    name="cancel"
                    onClick={[Function]}
                    type="button"
          >
                    Cancel
          </button>
</form>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <CarFormPresentation
    car={
        Object {
            "acceleration": 12,
            "name": "Audi",
          }
    }
    changeHandlers={
        Object {
            "acceleration": [Function],
            "name": [Function],
          }
    }
    errors={
        Object {
            "acceleration": "",
            "name": "",
          }
    }
    onCancel={[Function]}
    onSubmit={[Function]}
/>,
}
`;

exports[`CarFormPresentation renders correctly with field errors but cannot submit 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <form
    onSubmit={[Function]}
>
    <input
        name="name"
        onChange={[Function]}
        type="text"
        value="Audi"
    />
    <span
        className="error"
    >
        Not a good name
    </span>
    <input
        name="acceleration"
        onChange={[Function]}
        type="number"
        value={12}
    />
    <span
        className="error"
    >
        This car sucks
    </span>
    <button
        disabled={true}
        name="submit"
        type="submit"
    >
        Save
    </button>
    <button
        name="cancel"
        onClick={[Function]}
        type="button"
    >
        Cancel
    </button>
</form>,
  "nodes": Array [
    <form
      onSubmit={[Function]}
>
      <input
            name="name"
            onChange={[Function]}
            type="text"
            value="Audi"
      />
      <span
            className="error"
      >
            Not a good name
      </span>
      <input
            name="acceleration"
            onChange={[Function]}
            type="number"
            value={12}
      />
      <span
            className="error"
      >
            This car sucks
      </span>
      <button
            disabled={true}
            name="submit"
            type="submit"
      >
            Save
      </button>
      <button
            name="cancel"
            onClick={[Function]}
            type="button"
      >
            Cancel
      </button>
</form>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 2,
      "_context": Object {},
      "_currentElement": <CarFormPresentation
        car={
                Object {
                        "acceleration": 12,
                        "name": "Audi",
                      }
        }
        changeHandlers={
                Object {
                        "acceleration": [Function],
                        "name": [Function],
                      }
        }
        errors={
                Object {
                        "acceleration": "This car sucks",
                        "name": "Not a good name",
                      }
        }
        onCancel={[Function]}
        onSubmit={[Function]}
/>,
      "_debugID": 3,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": StatelessComponent {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "car": Object {
            "acceleration": 12,
            "name": "Audi",
          },
          "changeHandlers": Object {
            "acceleration": [Function],
            "name": [Function],
          },
          "errors": Object {
            "acceleration": "This car sucks",
            "name": "Not a good name",
          },
          "onCancel": [Function],
          "onSubmit": [Function],
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 2,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <form
          onSubmit={[Function]}
>
          <input
                    name="name"
                    onChange={[Function]}
                    type="text"
                    value="Audi"
          />
          <span
                    className="error"
          >
                    Not a good name
          </span>
          <input
                    name="acceleration"
                    onChange={[Function]}
                    type="number"
                    value={12}
          />
          <span
                    className="error"
          >
                    This car sucks
          </span>
          <button
                    disabled={true}
                    name="submit"
                    type="submit"
          >
                    Save
          </button>
          <button
                    name="cancel"
                    onClick={[Function]}
                    type="button"
          >
                    Cancel
          </button>
</form>,
        "_debugID": 4,
        "_renderedOutput": <form
          onSubmit={[Function]}
>
          <input
                    name="name"
                    onChange={[Function]}
                    type="text"
                    value="Audi"
          />
          <span
                    className="error"
          >
                    Not a good name
          </span>
          <input
                    name="acceleration"
                    onChange={[Function]}
                    type="number"
                    value={12}
          />
          <span
                    className="error"
          >
                    This car sucks
          </span>
          <button
                    disabled={true}
                    name="submit"
                    type="submit"
          >
                    Save
          </button>
          <button
                    name="cancel"
                    onClick={[Function]}
                    type="button"
          >
                    Cancel
          </button>
</form>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <CarFormPresentation
    car={
        Object {
            "acceleration": 12,
            "name": "Audi",
          }
    }
    changeHandlers={
        Object {
            "acceleration": [Function],
            "name": [Function],
          }
    }
    errors={
        Object {
            "acceleration": "This car sucks",
            "name": "Not a good name",
          }
    }
    onCancel={[Function]}
    onSubmit={[Function]}
/>,
}
`;
